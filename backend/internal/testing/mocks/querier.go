// Code generated by MockGen. DO NOT EDIT.
// Source: ./db/dbc/querier.go
//
// Generated by this command:
//
//	mockgen -source=./db/dbc/querier.go -destination=./internal/testing/mocks/querier.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	dbc "github.com/panthershark/app/backend/db/dbc"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// ConfigsGet mocks base method.
func (m *MockQuerier) ConfigsGet(ctx context.Context, slugs string) ([][]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigsGet", ctx, slugs)
	ret0, _ := ret[0].([][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfigsGet indicates an expected call of ConfigsGet.
func (mr *MockQuerierMockRecorder) ConfigsGet(ctx, slugs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigsGet", reflect.TypeOf((*MockQuerier)(nil).ConfigsGet), ctx, slugs)
}

// CreateAccount mocks base method.
func (m *MockQuerier) CreateAccount(ctx context.Context, email string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, email)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockQuerierMockRecorder) CreateAccount(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockQuerier)(nil).CreateAccount), ctx, email)
}

// CreatePerson mocks base method.
func (m *MockQuerier) CreatePerson(ctx context.Context, arg dbc.CreatePersonParams) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", ctx, arg)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockQuerierMockRecorder) CreatePerson(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockQuerier)(nil).CreatePerson), ctx, arg)
}

// GetAccountsByEmail mocks base method.
func (m *MockQuerier) GetAccountsByEmail(ctx context.Context, emails []string) ([]*dbc.GetAccountsByEmailRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsByEmail", ctx, emails)
	ret0, _ := ret[0].([]*dbc.GetAccountsByEmailRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsByEmail indicates an expected call of GetAccountsByEmail.
func (mr *MockQuerierMockRecorder) GetAccountsByEmail(ctx, emails any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsByEmail", reflect.TypeOf((*MockQuerier)(nil).GetAccountsByEmail), ctx, emails)
}

// SaveConfig mocks base method.
func (m *MockQuerier) SaveConfig(ctx context.Context, arg dbc.SaveConfigParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveConfig", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveConfig indicates an expected call of SaveConfig.
func (mr *MockQuerierMockRecorder) SaveConfig(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveConfig", reflect.TypeOf((*MockQuerier)(nil).SaveConfig), ctx, arg)
}
