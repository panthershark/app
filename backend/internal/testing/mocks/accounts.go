// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/accounts.go
//
// Generated by this command:
//
//	mockgen -source=./api/accounts.go -destination=./internal/testing/mocks/accounts.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	api "github.com/panthershark/app/backend/api"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountsApi is a mock of AccountsApi interface.
type MockAccountsApi struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsApiMockRecorder
}

// MockAccountsApiMockRecorder is the mock recorder for MockAccountsApi.
type MockAccountsApiMockRecorder struct {
	mock *MockAccountsApi
}

// NewMockAccountsApi creates a new mock instance.
func NewMockAccountsApi(ctrl *gomock.Controller) *MockAccountsApi {
	mock := &MockAccountsApi{ctrl: ctrl}
	mock.recorder = &MockAccountsApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountsApi) EXPECT() *MockAccountsApiMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method.
func (m *MockAccountsApi) CreateAccount(email string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", email)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockAccountsApiMockRecorder) CreateAccount(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountsApi)(nil).CreateAccount), email)
}

// CreateUser mocks base method.
func (m *MockAccountsApi) CreateUser(input api.UserCreateInput) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", input)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAccountsApiMockRecorder) CreateUser(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAccountsApi)(nil).CreateUser), input)
}

// GetUserByEmail mocks base method.
func (m *MockAccountsApi) GetUserByEmail(email string) (*api.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*api.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAccountsApiMockRecorder) GetUserByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAccountsApi)(nil).GetUserByEmail), email)
}

// GetUserById mocks base method.
func (m *MockAccountsApi) GetUserById(id uuid.UUID) (*api.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(*api.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockAccountsApiMockRecorder) GetUserById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockAccountsApi)(nil).GetUserById), id)
}
