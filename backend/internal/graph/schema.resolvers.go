package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"context"

	"github.com/google/uuid"
	pgx "github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/panthershark/app/backend/api"
	"github.com/panthershark/app/backend/db/dbc"
	"github.com/panthershark/app/backend/internal/graph/generated"
	"github.com/panthershark/app/backend/internal/graph/model"
	"github.com/panthershark/app/backend/internal/reqctx"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, user api.UserCreateInput) (uuid.UUID, error) {
	stuff := reqctx.GetPlatformStuff(ctx)
	id := uuid.Nil

	err := stuff.Pool.BeginTxFunc(ctx, pgx.TxOptions{
		IsoLevel:   pgx.ReadCommitted,
		AccessMode: pgx.ReadWrite,
	}, func(c pgx.Tx) error {
		accounts := stuff.NewApi(dbc.New(c), &ctx)
		a, err := accounts.CreateUser(user)
		id = uuid.UUID(a)

		return err
	})

	return id, err
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, email string) (*model.User, error) {
	stuff := reqctx.GetPlatformStuff(ctx)
	var user *model.User

	err := stuff.Pool.AcquireFunc(ctx, func(c *pgxpool.Conn) error {
		accounts := stuff.NewApi(dbc.New(c), &ctx)
		u, err := accounts.GetUserByEmail(email)

		user = &model.User{
			ID:        uuid.UUID(u.ID),
			Email:     u.Email,
			FirstName: "",
			LastName:  "",
		}

		if u.Person != nil {
			user.FirstName = u.Person.FirstName
		}

		if u.Person != nil {
			user.LastName = u.Person.LastName
		}

		return err
	})

	return user, err
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
